#!/bin/bash

function createNamespace() {
  ns=$1

  # verify that the namespace exists
  ns=`kubectl get namespace $1 --no-headers --output=go-template={{.metadata.name}} 2>/dev/null`
  if [ -z "${ns}" ]; then
    echo "Namespace (${1}) not found, creating namespace"
    kubectl create namespace "${1}"
  else echo "Namespace (${1})" exists, skipping namespace creation
  fi
}

function validate() {
  if [ $? -ne 0 ]; 
  then
      echo "$1 deployment failed in namespace $2. Exiting !!!"
      exit 1
  else
      echo "$1 deployment in namespace $2 successful !!!"    
  fi
}

function validateAndPrint() {
  if [ $? -ne 0 ]; 
  then
      echo "$1 !!! Exiting !!!"
      exit 1   
  fi
}

function validateIPAddressRange() {
  local  ip=$1
  local  stat=1

  if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,3}$ ]];
  then
      OIFS=$IFS
      IFS='.'
      ip=($ip)
      IFS=$OIFS
      part3=$(cut -d'/' -f1 <<< ${ip[3]})
      part4=$(cut -d'/' -f2 <<< ${ip[3]})
      [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
          && ${ip[2]} -le 255 && $part3 -le 255 && $part4 -le 255 ]]

      if [ $? = 1 ];
      then
          echo "not valid"
          exit 1
      fi
  else
      echo "$ip is not a valid IP"
      exit 1
  fi
}

function validateCertificateStatus() {
  counter=1
  cert_creation_status="False"

  while [[ $counter -le 20 && "$cert_creation_status" = "False" ]];
  do
    cert_creation_status=$(kubectl -n istio-system get certificate istio-ingressgateway-certs -o jsonpath='{.status.conditions[0].status}')
    if [ "$cert_creation_status" = "True" ]; then
      echo "Certificate is in ready status"
    else
      echo "Certificate not in ready status yet, sleep for 10 more seconds"
      echo "${counter} iteration check for certificate ready status"
      sleep 10
    fi
    counter=$((counter+1))
  done

  if [ $counter -gt 20 ];
  then
    echo "Certification creation failed !! Exiting "
    cert_failure_reason=$(kubectl -n istio-system get certificaterequest -o json | jq -r '.items[0].status.conditions[0].message')
    echo "Cert Creation request failed with error: $cert_failure_reason"
    cert_failure_reason=$(kubectl -n istio-system get order -o json | jq -r '.items[0].status.reason')
    echo "Cert Order request failed with error: $cert_failure_reason"
    exit 1
  fi
}

function validateStorageClass() {
  counter=1
  storage_class_found="False"

  while [[ $counter -le 20 && "$storage_class_found" = "False" ]];
  do
    storage_counter=$(kubectl get storageclass | grep default | wc -l)
    if [ ! $storage_counter -gt 0 ]; then
      echo "Default storageClass not yet created, sleep for 10 more seconds"
      echo "${counter} iteration check for storageClass creation status"
      sleep 10
    else
      storage_class_found="True"
    fi
    counter=$((counter+1))
  done

  if [ $counter -gt 20 ];
  then
    echo "For the KotsAdmin installation to work default storageClass has to be set. Exiting !!"
    exit 1
  fi
}

function validateEmptyParam() {
    if [ ! -z "$1" ]
    then
      echo "$1 is empty..$2 Exiting !!"
      exit 1
    fi
}

#StartTime
start=`date +%s`
echo $@ >> consoleOutput.txt

######## -------------------------------------------------- End Install Velero -------------------------------------------########

echo "Preparing outputs for upload in blob storage account $storageAccountName1 / deploymentlogs"

echo "----ARM Outputs----" >> consoleOutputs.txt

echo "Uploading data to $storageAccountName1 / deploymentlogs"
expiry=`date -u -d "30 minutes" '+%Y-%m-%dT%H:%MZ'`
run_date=`date '+%Y-%m-%d-%H-%M'`

#Target FileNames
targetFileNameConsoleOutput=consoleOutputs_$run_date.txt
targetFileNameJsonOutput=outputs_$run_date.json

#Upload console logs to azure cloud storage
sastoken=`az storage container generate-sas --account-key $storageAccountKey1 --account-name $storageAccountName1 -n deploymentlogs --https-only --permissions dlrw --expiry $expiry -o tsv`
az storage blob upload -n $targetFileNameConsoleOutput -c deploymentlogs -f consoleOutputs.txt --sas-token $sastoken --account-name $storageAccountName1
az storage blob upload -n $targetFileNameJsonOutput -c deploymentlogs -f outputs.json --sas-token $sastoken --account-name $storageAccountName1


#deleting this https gw as the kots admin provisioning job will add an other customer https gateway
#and having 2 https gateways will result in 404
kubectl -n istio-system delete gateway istio-autogenerated-k8s-ingress

echo "Infrastructure Installation finished"

#RunStats
end=`date +%s`
runtime=$((end-start))
hours=$((runtime / 3600)); minutes=$(( (runtime % 3600) / 60 )); seconds=$(( (runtime % 3600) % 60 )); 
echo "Infrastructure Provisioning Runtime: $hours:$minutes:$seconds (hh:mm:ss)"
